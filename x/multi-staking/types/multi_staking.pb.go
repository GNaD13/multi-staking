// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: multistaking/v1/multi_staking.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MultiStakingCoin struct {
	Denom      string                                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount     github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	BondWeight github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=bond_weight,json=bondWeight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"bond_weight"`
}

func (m *MultiStakingCoin) Reset()         { *m = MultiStakingCoin{} }
func (m *MultiStakingCoin) String() string { return proto.CompactTextString(m) }
func (*MultiStakingCoin) ProtoMessage()    {}
func (*MultiStakingCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2c118bafa9b671a, []int{0}
}
func (m *MultiStakingCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiStakingCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiStakingCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiStakingCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiStakingCoin.Merge(m, src)
}
func (m *MultiStakingCoin) XXX_Size() int {
	return m.Size()
}
func (m *MultiStakingCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiStakingCoin.DiscardUnknown(m)
}

var xxx_messageInfo_MultiStakingCoin proto.InternalMessageInfo

func (m *MultiStakingCoin) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type LockID struct {
	MultiStakerAddr string `protobuf:"bytes,1,opt,name=multi_staker_addr,json=multiStakerAddr,proto3" json:"multi_staker_addr,omitempty"`
	ValAddr         string `protobuf:"bytes,2,opt,name=val_addr,json=valAddr,proto3" json:"val_addr,omitempty"`
}

func (m *LockID) Reset()         { *m = LockID{} }
func (m *LockID) String() string { return proto.CompactTextString(m) }
func (*LockID) ProtoMessage()    {}
func (*LockID) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2c118bafa9b671a, []int{1}
}
func (m *LockID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockID.Merge(m, src)
}
func (m *LockID) XXX_Size() int {
	return m.Size()
}
func (m *LockID) XXX_DiscardUnknown() {
	xxx_messageInfo_LockID.DiscardUnknown(m)
}

var xxx_messageInfo_LockID proto.InternalMessageInfo

func (m *LockID) GetMultiStakerAddr() string {
	if m != nil {
		return m.MultiStakerAddr
	}
	return ""
}

func (m *LockID) GetValAddr() string {
	if m != nil {
		return m.ValAddr
	}
	return ""
}

type MultiStakingLock struct {
	LockID     *LockID          `protobuf:"bytes,1,opt,name=lockID,proto3" json:"lockID,omitempty"`
	LockedCoin MultiStakingCoin `protobuf:"bytes,2,opt,name=locked_coin,json=lockedCoin,proto3" json:"locked_coin"`
}

func (m *MultiStakingLock) Reset()         { *m = MultiStakingLock{} }
func (m *MultiStakingLock) String() string { return proto.CompactTextString(m) }
func (*MultiStakingLock) ProtoMessage()    {}
func (*MultiStakingLock) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2c118bafa9b671a, []int{2}
}
func (m *MultiStakingLock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiStakingLock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiStakingLock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiStakingLock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiStakingLock.Merge(m, src)
}
func (m *MultiStakingLock) XXX_Size() int {
	return m.Size()
}
func (m *MultiStakingLock) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiStakingLock.DiscardUnknown(m)
}

var xxx_messageInfo_MultiStakingLock proto.InternalMessageInfo

type ValidatorMultiStakingCoin struct {
	ValAddr   string `protobuf:"bytes,1,opt,name=val_addr,json=valAddr,proto3" json:"val_addr,omitempty"`
	CoinDenom string `protobuf:"bytes,2,opt,name=coin_denom,json=coinDenom,proto3" json:"coin_denom,omitempty"`
}

func (m *ValidatorMultiStakingCoin) Reset()         { *m = ValidatorMultiStakingCoin{} }
func (m *ValidatorMultiStakingCoin) String() string { return proto.CompactTextString(m) }
func (*ValidatorMultiStakingCoin) ProtoMessage()    {}
func (*ValidatorMultiStakingCoin) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2c118bafa9b671a, []int{3}
}
func (m *ValidatorMultiStakingCoin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorMultiStakingCoin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorMultiStakingCoin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorMultiStakingCoin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorMultiStakingCoin.Merge(m, src)
}
func (m *ValidatorMultiStakingCoin) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorMultiStakingCoin) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorMultiStakingCoin.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorMultiStakingCoin proto.InternalMessageInfo

func (m *ValidatorMultiStakingCoin) GetValAddr() string {
	if m != nil {
		return m.ValAddr
	}
	return ""
}

func (m *ValidatorMultiStakingCoin) GetCoinDenom() string {
	if m != nil {
		return m.CoinDenom
	}
	return ""
}

type UnlockID struct {
	MultiStakerAddr string `protobuf:"bytes,1,opt,name=multi_staker_addr,json=multiStakerAddr,proto3" json:"multi_staker_addr,omitempty"`
	ValAddr         string `protobuf:"bytes,2,opt,name=val_addr,json=valAddr,proto3" json:"val_addr,omitempty"`
}

func (m *UnlockID) Reset()         { *m = UnlockID{} }
func (m *UnlockID) String() string { return proto.CompactTextString(m) }
func (*UnlockID) ProtoMessage()    {}
func (*UnlockID) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2c118bafa9b671a, []int{4}
}
func (m *UnlockID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnlockID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnlockID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnlockID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnlockID.Merge(m, src)
}
func (m *UnlockID) XXX_Size() int {
	return m.Size()
}
func (m *UnlockID) XXX_DiscardUnknown() {
	xxx_messageInfo_UnlockID.DiscardUnknown(m)
}

var xxx_messageInfo_UnlockID proto.InternalMessageInfo

func (m *UnlockID) GetMultiStakerAddr() string {
	if m != nil {
		return m.MultiStakerAddr
	}
	return ""
}

func (m *UnlockID) GetValAddr() string {
	if m != nil {
		return m.ValAddr
	}
	return ""
}

type MultiStakingUnlock struct {
	UnlockID *UnlockID     `protobuf:"bytes,1,opt,name=unlockID,proto3" json:"unlockID,omitempty"`
	Entries  []UnlockEntry `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries"`
}

func (m *MultiStakingUnlock) Reset()      { *m = MultiStakingUnlock{} }
func (*MultiStakingUnlock) ProtoMessage() {}
func (*MultiStakingUnlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2c118bafa9b671a, []int{5}
}
func (m *MultiStakingUnlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiStakingUnlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiStakingUnlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiStakingUnlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiStakingUnlock.Merge(m, src)
}
func (m *MultiStakingUnlock) XXX_Size() int {
	return m.Size()
}
func (m *MultiStakingUnlock) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiStakingUnlock.DiscardUnknown(m)
}

var xxx_messageInfo_MultiStakingUnlock proto.InternalMessageInfo

type UnlockEntry struct {
	// creation_height is the height which the unbonding took place.
	CreationHeight int64            `protobuf:"varint,1,opt,name=creation_height,json=creationHeight,proto3" json:"creation_height,omitempty"`
	UnlockingCoin  MultiStakingCoin `protobuf:"bytes,2,opt,name=unlocking_coin,json=unlockingCoin,proto3" json:"unlocking_coin"`
}

func (m *UnlockEntry) Reset()      { *m = UnlockEntry{} }
func (*UnlockEntry) ProtoMessage() {}
func (*UnlockEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2c118bafa9b671a, []int{6}
}
func (m *UnlockEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnlockEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnlockEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnlockEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnlockEntry.Merge(m, src)
}
func (m *UnlockEntry) XXX_Size() int {
	return m.Size()
}
func (m *UnlockEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_UnlockEntry.DiscardUnknown(m)
}

var xxx_messageInfo_UnlockEntry proto.InternalMessageInfo

func (m *UnlockEntry) GetCreationHeight() int64 {
	if m != nil {
		return m.CreationHeight
	}
	return 0
}

func (m *UnlockEntry) GetUnlockingCoin() MultiStakingCoin {
	if m != nil {
		return m.UnlockingCoin
	}
	return MultiStakingCoin{}
}

func init() {
	proto.RegisterType((*MultiStakingCoin)(nil), "multistaking.v1.MultiStakingCoin")
	proto.RegisterType((*LockID)(nil), "multistaking.v1.LockID")
	proto.RegisterType((*MultiStakingLock)(nil), "multistaking.v1.MultiStakingLock")
	proto.RegisterType((*ValidatorMultiStakingCoin)(nil), "multistaking.v1.ValidatorMultiStakingCoin")
	proto.RegisterType((*UnlockID)(nil), "multistaking.v1.UnlockID")
	proto.RegisterType((*MultiStakingUnlock)(nil), "multistaking.v1.MultiStakingUnlock")
	proto.RegisterType((*UnlockEntry)(nil), "multistaking.v1.UnlockEntry")
}

func init() {
	proto.RegisterFile("multistaking/v1/multi_staking.proto", fileDescriptor_c2c118bafa9b671a)
}

var fileDescriptor_c2c118bafa9b671a = []byte{
	// 586 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4f, 0x6b, 0x13, 0x4f,
	0x18, 0xce, 0xb6, 0xfd, 0xa5, 0xe9, 0xbb, 0xfc, 0x5a, 0x1d, 0x0a, 0xa6, 0x41, 0x37, 0x35, 0x82,
	0x16, 0x21, 0xbb, 0x24, 0xe2, 0xc1, 0xd2, 0x8b, 0x31, 0x42, 0x03, 0xfe, 0xc1, 0x8d, 0x56, 0x10,
	0x64, 0x99, 0xdd, 0x1d, 0x37, 0x43, 0x76, 0x67, 0xc2, 0xee, 0x24, 0xda, 0x6f, 0xe0, 0xc1, 0x83,
	0xe0, 0xc5, 0xa3, 0x1f, 0xc2, 0x0f, 0xd1, 0x63, 0xf1, 0x24, 0x82, 0x45, 0x92, 0x2f, 0x22, 0x33,
	0xb3, 0xa9, 0xdb, 0x14, 0x0f, 0x8a, 0xa7, 0xec, 0xfb, 0xef, 0x99, 0xe7, 0x7d, 0x9e, 0xcc, 0xc0,
	0xb5, 0x64, 0x1c, 0x0b, 0x9a, 0x09, 0x3c, 0xa4, 0x2c, 0x72, 0x26, 0x2d, 0x47, 0xc5, 0x5e, 0x9e,
	0xb0, 0x47, 0x29, 0x17, 0x1c, 0x6d, 0x14, 0x9b, 0xec, 0x49, 0xab, 0xb6, 0x19, 0xf1, 0x88, 0xab,
	0x9a, 0x23, 0xbf, 0x74, 0x5b, 0x6d, 0x2b, 0xe0, 0x59, 0xc2, 0x33, 0x4f, 0x17, 0x74, 0x90, 0x97,
	0x2c, 0x1d, 0x39, 0x3e, 0xce, 0x88, 0x33, 0x69, 0xf9, 0x44, 0xe0, 0x96, 0x13, 0x70, 0xca, 0xf2,
	0x7a, 0x3d, 0xe2, 0x3c, 0x8a, 0x89, 0xa3, 0x22, 0x7f, 0xfc, 0xca, 0x11, 0x34, 0x21, 0x99, 0xc0,
	0xc9, 0x48, 0x37, 0x34, 0xbe, 0x1b, 0x70, 0xe1, 0xa1, 0x64, 0xd1, 0xd7, 0x2c, 0xee, 0x71, 0xca,
	0xd0, 0x26, 0xfc, 0x17, 0x12, 0xc6, 0x93, 0xaa, 0xb1, 0x6d, 0xec, 0xac, 0xb9, 0x3a, 0x40, 0x4f,
	0xa1, 0x8c, 0x13, 0x3e, 0x66, 0xa2, 0xba, 0x24, 0xd3, 0x9d, 0xbd, 0xa3, 0x93, 0x7a, 0xe9, 0xdb,
	0x49, 0xfd, 0x7a, 0x44, 0xc5, 0x60, 0xec, 0xdb, 0x01, 0x4f, 0x72, 0x72, 0xf9, 0x4f, 0x33, 0x0b,
	0x87, 0x8e, 0x38, 0x1c, 0x91, 0xcc, 0xee, 0x31, 0xf1, 0xe5, 0x73, 0x13, 0x72, 0xee, 0x3d, 0x26,
	0xdc, 0x1c, 0x0b, 0xbd, 0x04, 0xd3, 0xe7, 0x2c, 0xf4, 0x5e, 0x13, 0x1a, 0x0d, 0x44, 0x75, 0xf9,
	0x8f, 0xa1, 0xbb, 0x24, 0x28, 0x40, 0x77, 0x49, 0xe0, 0x82, 0x04, 0x7c, 0xae, 0xf0, 0x1a, 0x8f,
	0xa1, 0xfc, 0x80, 0x07, 0xc3, 0x5e, 0x17, 0xdd, 0x84, 0x8b, 0xbf, 0x3c, 0x20, 0xa9, 0x87, 0xc3,
	0x30, 0xcd, 0x17, 0xd4, 0x3e, 0xf4, 0x55, 0xfe, 0x6e, 0x18, 0xa6, 0x68, 0x0b, 0x2a, 0x13, 0x1c,
	0xeb, 0x16, 0xb5, 0xac, 0xbb, 0x3a, 0xc1, 0xb1, 0x2c, 0x35, 0x3e, 0x2c, 0x08, 0x26, 0xd1, 0x91,
	0x03, 0xe5, 0x58, 0x9d, 0xa2, 0x00, 0xcd, 0xf6, 0x25, 0x7b, 0xc1, 0x59, 0x5b, 0x93, 0x70, 0xf3,
	0x36, 0xb4, 0x0f, 0xa6, 0xfc, 0x22, 0xa1, 0x27, 0xcd, 0x52, 0x67, 0x98, 0xed, 0xab, 0xe7, 0xa6,
	0x16, 0x9d, 0xe9, 0xac, 0x48, 0x61, 0x5c, 0xd0, 0xb3, 0x32, 0xb3, 0xbb, 0xf2, 0xf6, 0x53, 0xbd,
	0xd4, 0x38, 0x80, 0xda, 0x01, 0x8e, 0x69, 0x88, 0x05, 0x4f, 0xd5, 0x90, 0x28, 0xfa, 0x59, 0x5c,
	0xc7, 0x38, 0xb3, 0x0e, 0xba, 0x02, 0x20, 0x19, 0x78, 0xda, 0x6f, 0xbd, 0xeb, 0x9a, 0xcc, 0x74,
	0x65, 0xa2, 0xf1, 0x04, 0x2a, 0xcf, 0x58, 0xfc, 0xaf, 0x05, 0x44, 0xc5, 0xbd, 0x34, 0x3e, 0xba,
	0x0d, 0x95, 0x31, 0x3b, 0x23, 0xe2, 0xd6, 0x39, 0x39, 0xe6, 0x54, 0xdc, 0xd3, 0x56, 0xb4, 0x07,
	0xab, 0x84, 0x89, 0x94, 0x92, 0xac, 0xba, 0xb4, 0xbd, 0xbc, 0x63, 0xb6, 0x2f, 0xff, 0x66, 0xea,
	0x3e, 0x13, 0xe9, 0x61, 0xae, 0xdf, 0x7c, 0x64, 0xb7, 0x22, 0xc5, 0xfb, 0x28, 0x05, 0x7c, 0x67,
	0x80, 0x59, 0x68, 0x44, 0x37, 0x60, 0x23, 0x48, 0x09, 0x16, 0x94, 0x33, 0x6f, 0xa0, 0xff, 0x9a,
	0x92, 0xd5, 0xb2, 0xbb, 0x3e, 0x4f, 0xef, 0xab, 0x2c, 0x7a, 0x04, 0xeb, 0x9a, 0x0c, 0x65, 0xd1,
	0x5f, 0x99, 0xf9, 0xff, 0xe9, 0xb8, 0xf6, 0x53, 0xd2, 0xe9, 0xf4, 0x8f, 0xa6, 0x96, 0x71, 0x3c,
	0xb5, 0x8c, 0x1f, 0x53, 0xcb, 0x78, 0x3f, 0xb3, 0x4a, 0xc7, 0x33, 0xab, 0xf4, 0x75, 0x66, 0x95,
	0x5e, 0xdc, 0x29, 0x5c, 0x89, 0x94, 0xe0, 0x98, 0x72, 0x41, 0x82, 0x81, 0x7e, 0x5e, 0x9a, 0xf3,
	0xf7, 0xe6, 0xcd, 0x42, 0xac, 0x6e, 0x8a, 0x5f, 0x56, 0x57, 0xfe, 0xd6, 0xcf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x2a, 0xd5, 0x31, 0xde, 0x9c, 0x04, 0x00, 0x00,
}

func (m *MultiStakingCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiStakingCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiStakingCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BondWeight.Size()
		i -= size
		if _, err := m.BondWeight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMultiStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMultiStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintMultiStaking(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LockID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValAddr) > 0 {
		i -= len(m.ValAddr)
		copy(dAtA[i:], m.ValAddr)
		i = encodeVarintMultiStaking(dAtA, i, uint64(len(m.ValAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MultiStakerAddr) > 0 {
		i -= len(m.MultiStakerAddr)
		copy(dAtA[i:], m.MultiStakerAddr)
		i = encodeVarintMultiStaking(dAtA, i, uint64(len(m.MultiStakerAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MultiStakingLock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiStakingLock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiStakingLock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LockedCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMultiStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.LockID != nil {
		{
			size, err := m.LockID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMultiStaking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorMultiStakingCoin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorMultiStakingCoin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorMultiStakingCoin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CoinDenom) > 0 {
		i -= len(m.CoinDenom)
		copy(dAtA[i:], m.CoinDenom)
		i = encodeVarintMultiStaking(dAtA, i, uint64(len(m.CoinDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValAddr) > 0 {
		i -= len(m.ValAddr)
		copy(dAtA[i:], m.ValAddr)
		i = encodeVarintMultiStaking(dAtA, i, uint64(len(m.ValAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnlockID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnlockID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnlockID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValAddr) > 0 {
		i -= len(m.ValAddr)
		copy(dAtA[i:], m.ValAddr)
		i = encodeVarintMultiStaking(dAtA, i, uint64(len(m.ValAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MultiStakerAddr) > 0 {
		i -= len(m.MultiStakerAddr)
		copy(dAtA[i:], m.MultiStakerAddr)
		i = encodeVarintMultiStaking(dAtA, i, uint64(len(m.MultiStakerAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MultiStakingUnlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiStakingUnlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiStakingUnlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMultiStaking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.UnlockID != nil {
		{
			size, err := m.UnlockID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMultiStaking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnlockEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnlockEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnlockEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UnlockingCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMultiStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.CreationHeight != 0 {
		i = encodeVarintMultiStaking(dAtA, i, uint64(m.CreationHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMultiStaking(dAtA []byte, offset int, v uint64) int {
	offset -= sovMultiStaking(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MultiStakingCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovMultiStaking(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovMultiStaking(uint64(l))
	l = m.BondWeight.Size()
	n += 1 + l + sovMultiStaking(uint64(l))
	return n
}

func (m *LockID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MultiStakerAddr)
	if l > 0 {
		n += 1 + l + sovMultiStaking(uint64(l))
	}
	l = len(m.ValAddr)
	if l > 0 {
		n += 1 + l + sovMultiStaking(uint64(l))
	}
	return n
}

func (m *MultiStakingLock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LockID != nil {
		l = m.LockID.Size()
		n += 1 + l + sovMultiStaking(uint64(l))
	}
	l = m.LockedCoin.Size()
	n += 1 + l + sovMultiStaking(uint64(l))
	return n
}

func (m *ValidatorMultiStakingCoin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValAddr)
	if l > 0 {
		n += 1 + l + sovMultiStaking(uint64(l))
	}
	l = len(m.CoinDenom)
	if l > 0 {
		n += 1 + l + sovMultiStaking(uint64(l))
	}
	return n
}

func (m *UnlockID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MultiStakerAddr)
	if l > 0 {
		n += 1 + l + sovMultiStaking(uint64(l))
	}
	l = len(m.ValAddr)
	if l > 0 {
		n += 1 + l + sovMultiStaking(uint64(l))
	}
	return n
}

func (m *MultiStakingUnlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnlockID != nil {
		l = m.UnlockID.Size()
		n += 1 + l + sovMultiStaking(uint64(l))
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovMultiStaking(uint64(l))
		}
	}
	return n
}

func (m *UnlockEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreationHeight != 0 {
		n += 1 + sovMultiStaking(uint64(m.CreationHeight))
	}
	l = m.UnlockingCoin.Size()
	n += 1 + l + sovMultiStaking(uint64(l))
	return n
}

func sovMultiStaking(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMultiStaking(x uint64) (n int) {
	return sovMultiStaking(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MultiStakingCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMultiStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiStakingCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiStakingCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMultiStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMultiStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMultiStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMultiStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondWeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMultiStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMultiStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BondWeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMultiStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMultiStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMultiStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiStakerAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMultiStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMultiStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultiStakerAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMultiStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMultiStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMultiStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMultiStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiStakingLock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMultiStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiStakingLock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiStakingLock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMultiStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMultiStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LockID == nil {
				m.LockID = &LockID{}
			}
			if err := m.LockID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMultiStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMultiStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LockedCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMultiStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMultiStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorMultiStakingCoin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMultiStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorMultiStakingCoin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorMultiStakingCoin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMultiStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMultiStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMultiStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMultiStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMultiStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMultiStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnlockID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMultiStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnlockID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnlockID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiStakerAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMultiStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMultiStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultiStakerAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMultiStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMultiStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMultiStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMultiStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiStakingUnlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMultiStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiStakingUnlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiStakingUnlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMultiStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMultiStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnlockID == nil {
				m.UnlockID = &UnlockID{}
			}
			if err := m.UnlockID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMultiStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMultiStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, UnlockEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMultiStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMultiStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnlockEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMultiStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnlockEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnlockEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationHeight", wireType)
			}
			m.CreationHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockingCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultiStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMultiStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMultiStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnlockingCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMultiStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMultiStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMultiStaking(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMultiStaking
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMultiStaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMultiStaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMultiStaking
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMultiStaking
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMultiStaking
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMultiStaking        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMultiStaking          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMultiStaking = fmt.Errorf("proto: unexpected end of group")
)
